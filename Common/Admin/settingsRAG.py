import streamlit as st 
import json
import wx
import createRAG as cRG

app = wx.App(False)

st.header("–°–æ–∑–¥–∞–Ω–∏–µ RAG –±–∞–∑—ã")

st.divider()
col1, col2 = st.columns(2)


def checkCreate():
    if st.session_state.baseName == "": return -1
    if st.session_state.docpath == "": return -1
    if st.session_state.ragpath == "": return -1
    if st.session_state.sentencer == "": return -1
    if st.session_state.chuncker == "": return -1
    if st.session_state.collection_name == "": return -1
    return 0


Sentencers = st.session_state.settings["Sentencer"]
RAGBases = st.session_state.settings["RAGBases"]
Chunckers = st.session_state.settings["Chunckers"]

 
with col1:
    st.session_state.baseName = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π RAG –±–∞–∑—ã ", st.session_state.baseName)
    st.session_state.collection_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –Ω–æ–≤–æ–π RAG –±–∞–∑—ã ", st.session_state.collection_name)

    optionSentencers = st.selectbox( "–ö–∞–∫—É—é –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–µ—Ä–∞ –≤—ã–±–∏—Ä–∞–µ–º?", (Sentencers) )
    st.session_state.sentencer=optionSentencers
    st.session_state.sentencer_path=Sentencers[optionSentencers]
    
    optionChunckers = st.selectbox( "–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º?", (Chunckers) )
    st.session_state.chuncker=optionChunckers

    if st.button("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"):
        dialog = wx.DirDialog(None, "Select a folder:", style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dialog.ShowModal() == wx.ID_OK:
            st.session_state.docpath = dialog.GetPath()  

    if st.button("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (RAG):"):
        dialog = wx.DirDialog(None, "Select a folder:", style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dialog.ShowModal() == wx.ID_OK:
            st.session_state.ragpath = dialog.GetPath()  
 

 
with col2: 
    st.write(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π RAG –±–∞–∑—ã:")
    st.markdown(f"–ò–º—è –±–∞–∑—ã: :red[{st.session_state.baseName}]")
    st.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ: :red[{st.session_state.collection_name}]")
    st.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —ç–º–±–µ–¥–µ—Ä–∞: :red[{st.session_state.sentencer}]")
    st.write(f"–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É —ç–º–±–µ–¥–µ—Ä—É: :red[{st.session_state.sentencer_path}]")
    st.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏ : :red[{st.session_state.chuncker}]")
    st.write(f"–ü—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: :red[{st.session_state.docpath}]")
    st.write(f"–ü—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –±–∞–∑—ã: :red[{st.session_state.ragpath}]")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É", type="primary"):
        if checkCreate()==-1:
            st.error('–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!', icon="üö®")
        else:
            st.write("–û–∂–∏–¥–∞–µ–º.....")
            ret = cRG.createRAG( st.session_state.baseName, st.session_state.docpath, st.session_state.ragpath, st.session_state.sentencer, st.session_state.sentencer_path, st.session_state.collection_name, st.session_state.chuncker)
            st.write("–ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞")
            st.write(ret)


st.divider()
col3, col4 = st.columns(2)

with col3: 
    optionRAGBases = st.selectbox( "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö RAG –±–∞–∑–∞—Ö", (RAGBases) )
    st.write(f"–ò–º—è –±–∞–∑—ã: '{optionRAGBases}'")
    st.write(f"–ü—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {RAGBases[optionRAGBases]["DOCPath"]}")
    st.write(f"–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–µ—Ä—Ä–∞: {RAGBases[optionRAGBases]["Sentencer"]}")
    st.write(f"–ü—É—Ç—å –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –±–∞–∑—ã: {RAGBases[optionRAGBases]["DBPath"]}")
    st.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ: {RAGBases[optionRAGBases]["CollectionName"]}")
    st.write(f"–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏: {RAGBases[optionRAGBases]["Chuncker"]}")

with col4: 
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", type="secondary"):
        st.write("–û–∂–∏–¥–∞–µ–º.....")
        ret = cRG.createRAG( optionRAGBases, RAGBases[optionRAGBases]["DOCPath"], RAGBases[optionRAGBases]["DBPath"], RAGBases[optionRAGBases]["Sentencer"], st.session_state.sentencer_path,RAGBases[optionRAGBases]["CollectionName"], RAGBases[optionRAGBases]["Chuncker"])
        st.write("–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        st.write(ret)
    st.divider()

    if st.button("–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É", type="primary"):
        st.write(f"–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç )")

st.divider()

#filename = 'numbers.json'
#with open(filename, 'w') as f:
#    json.dump(mySettings, f)